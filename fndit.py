import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

# --- Fun√ß√µes de C√°lculo ---

def calcular_parcela_price(valor_financiamento, taxa_juros_mensal, num_parcelas):
    """Calcula a parcela fixa do sistema Price."""
    if num_parcelas <= 0: # Prazo zero ou negativo n√£o faz sentido para c√°lculo de parcela
        return float('inf')
    if taxa_juros_mensal <= 1e-9: # Tratando juros muito pr√≥ximos de zero como zero para estabilidade
        return valor_financiamento / num_parcelas
    
    try:
        denominador = 1 - (1 + taxa_juros_mensal)**(-num_parcelas)
        if denominador == 0: # Caso a taxa seja t√£o pequena que a exponencia√ß√£o se aproxime de 1
            return valor_financiamento / num_parcelas
        return (valor_financiamento * taxa_juros_mensal) / denominador
    except OverflowError: # Para n√∫meros muito grandes/pequenos
        return float('inf') # Retorna infinito se o c√°lculo for invi√°vel

def calcular_vpl(fluxos_caixa, taxa_desconto_mensal):
    """Calcula o Valor Presente L√≠quido (VPL) de uma s√©rie de fluxos de caixa."""
    vpl = 0
    # Ajuste para evitar divis√£o por zero ou problemas com taxa de desconto -100%
    if taxa_desconto_mensal <= -1:
        return float('inf') 
        
    for t, fluxo in enumerate(fluxos_caixa):
        vpl += fluxo / ((1 + taxa_desconto_mensal)**t)
    return vpl

# --- Configura√ß√µes da P√°gina Streamlit ---
st.set_page_config(layout="wide", page_title="Simulador de Fomento √† Descarboniza√ß√£o (FNDIT)")

st.title("üå± Simulador de Pol√≠tica P√∫blica de Fomento √† Descarboniza√ß√£o")
st.markdown("""
Esta ferramenta permite simular o impacto de diferentes estrat√©gias de aloca√ß√£o de recursos do FNDIT
em projetos de descarboniza√ß√£o, considerando a elasticidade da demanda por cr√©dito.
""")

st.sidebar.header("Par√¢metros do Projeto e do FNDIT")

# --- Par√¢metros de Entrada ---
valor_projeto = st.sidebar.slider("1. Valor do Projeto de Descarboniza√ß√£o (R$)", 
                                  min_value=1_000_000, max_value=100_000_000, # Adjusted min_value for more flexibility
                                  value=30_000_000, step=1_000_000) # Adjusted step
taxa_juros_full_anual = st.sidebar.slider("2. Taxa de Juros Full (a.a. %) - Mercado", 
                                          min_value=0.0, max_value=15.0, 
                                          value=7.8, step=0.1) / 100
montante_fndit = st.sidebar.slider("3. Montante no FNDIT para Subs√≠dios/Cr√©dito (R$)", 
                                   min_value=10_000_000, max_value=1_000_000_000, 
                                   value=200_000_000, step=10_000_000) # Adjusted min_value and step
prazo_anos = st.sidebar.slider("4. Prazo para Amortiza√ß√£o (anos)", 
                               min_value=1, max_value=20, # Increased max_value
                               value=5, step=1)
taxa_juros_subsidio_anual = st.sidebar.slider("Taxa de Juros Subsidiada Alvo (a.a. %)", 
                                               min_value=0.0, max_value=taxa_juros_full_anual * 100, # Max can be full rate
                                               value=min(3.0, taxa_juros_full_anual * 100), step=0.1) / 100 # Ensure value doesn't exceed full rate
elasticidade_demanda = st.sidebar.slider("Elasticidade da Demanda por Cr√©dito de Descarboniza√ß√£o", 
                                         min_value=-5.0, max_value=-0.1, # Extended range for more elasticity
                                         value=-1.5, step=0.1)
reducao_co2e_por_projeto_ton = st.sidebar.number_input("Redu√ß√£o de CO2e por projeto (toneladas/ano)", 
                                                         min_value=0, max_value=500000, # Min_value to 0 for initial scenario
                                                         value=10000, step=1000)
taxa_desconto_tomador_anual = st.sidebar.slider("Taxa de Desconto para VPL (Tomador) a.a. (%)",
                                                min_value=0.0, max_value=25.0, # Extended max_value
                                                value=12.0, step=0.5) / 100

# --- "Simular" Button ---
if st.sidebar.button("Simular"):
    st.session_state.run_simulation = True
else:
    if 'run_simulation' not in st.session_state:
        st.session_state.run_simulation = False # Initialize state

if st.session_state.run_simulation:
    # --- Convers√µes ---
    prazo_meses = prazo_anos * 12
    # Ensure monthly rates are handled correctly for 0% annual rates
    taxa_juros_full_mensal = (1 + taxa_juros_full_anual)**(1/12) - 1 if taxa_juros_full_anual > 0 else 0.0
    taxa_juros_subsidio_mensal = (1 + taxa_juros_subsidio_anual)**(1/12) - 1 if taxa_juros_subsidio_anual > 0 else 0.0
    taxa_desconto_tomador_mensal = (1 + taxa_desconto_tomador_anual)**(1/12) - 1 if taxa_desconto_tomador_anual > 0 else 0.0

    # --- C√°lculos dos Cen√°rios ---

    st.header("Resultados da Simula√ß√£o")

    col1, col2, col3 = st.columns(3)

    # --- Cen√°rio 1: Cr√©dito com Juros Full ---
    with col1:
        st.subheader("Cen√°rio 1: Cr√©dito com Juros Full")
        qtd_projetos_credito_full = montante_fndit // valor_projeto if valor_projeto > 0 else 0
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", f"{int(qtd_projetos_credito_full)}")

        parcela_full = calcular_parcela_price(valor_projeto, taxa_juros_full_mensal, prazo_meses)
        custo_total_full = parcela_full * prazo_meses
        juros_total_full = custo_total_full - valor_projeto
        st.markdown(f"**Detalhes por Projeto (Juros Full):**")
        st.markdown(f"- Parcela Mensal: R$ {parcela_full:,.2f}")
        st.markdown(f"- Custo Total Financiamento: R$ {custo_total_full:,.2f}")
        st.markdown(f"- Juros Totais Pagos: R$ {juros_total_full:,.2f}")

        # VPL para o Tomador (cen√°rio sem subs√≠dio - custo)
        # Assuming that if juros_full is 0, VPL of financing is effectively 0 for the borrower
        if taxa_juros_full_mensal <= 1e-9 and taxa_desconto_tomador_mensal <= 1e-9:
             vpl_tomador_full = 0.0
             st.markdown(f"- VPL para o Tomador (Juros Full): R$ {0.0:,.2f}")
             st.markdown(f"*(VPL do financiamento. Se juros e taxa de desconto s√£o 0%, VPL √© 0)*")
        else:
            fluxos_tomador_full = [-parcela_full] * prazo_meses
            fluxos_tomador_full[0] += valor_projeto # Recebe o valor no in√≠cio
            vpl_tomador_full = calcular_vpl(fluxos_tomador_full, taxa_desconto_tomador_mensal)
            st.markdown(f"- VPL para o Tomador (Juros Full): R$ {vpl_tomador_full:,.2f}")
            st.markdown(f"*(VPL inicial do financiamento. Representa o custo financeiro l√≠quido para o tomador)*")


    # --- Cen√°rio 2: Subs√≠dio de Juros (7,8% para 3%) ---
    with col2:
        st.subheader("Cen√°rio 2: Subs√≠dio de Juros")

        parcela_subsidio = calcular_parcela_price(valor_projeto, taxa_juros_subsidio_mensal, prazo_meses)
        custo_total_subsidio = parcela_subsidio * prazo_meses
        
        juros_total_subsidio = custo_total_subsidio - valor_projeto
        subs_por_projeto = (parcela_full - parcela_subsidio) * prazo_meses
        
        # --- FIX PARA OverflowError: float('inf') para int ---
        if subs_por_projeto <= 1e-9 or subs_por_projeto == float('inf'): # Se o subs√≠dio for zero, negativo ou infinito (erro de c√°lculo), FNDIT pode subsidiar "infinitos" projetos
            qtd_projetos_capacidade_fndit_display = "Infinito" 
            qtd_projetos_capacidade_fndit = float('inf') # Keep as float('inf') for internal calculations
        else:
            qtd_projetos_capacidade_fndit = montante_fndit // subs_por_projeto
            qtd_projetos_capacidade_fndit_display = f"{int(qtd_projetos_capacidade_fndit)}"
            
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", qtd_projetos_capacidade_fndit_display)

        st.markdown(f"**Detalhes por Projeto (Juros Subsidiados):**")
        st.markdown(f"- Parcela Mensal: R$ {parcela_subsidio:,.2f}")
        st.markdown(f"- Custo Total Financiamento: R$ {custo_total_subsidio:,.2f}")
        st.markdown(f"- Juros Totais Pagos: R$ {juros_total_subsidio:,.2f}")
        st.markdown(f"- **Subs√≠dio FNDIT por Projeto: R$ {subs_por_projeto:,.2f}**")

        # VPL para o Tomador (cen√°rio subsidiado - benef√≠cio)
        if taxa_juros_subsidio_mensal <= 1e-9 and taxa_desconto_tomador_mensal <= 1e-9:
            vpl_tomador_subsidio = 0.0
            st.markdown(f"- VPL para o Tomador (Juros Subsidiados): R$ {0.0:,.2f}")
        else:
            fluxos_tomador_subsidio = [-parcela_subsidio] * prazo_meses
            fluxos_tomador_subsidio[0] += valor_projeto
            vpl_tomador_subsidio = calcular_vpl(fluxos_tomador_subsidio, taxa_desconto_tomador_mensal)
            st.markdown(f"- VPL para o Tomador (Juros Subsidiados): R$ {vpl_tomador_subsidio:,.2f}")


        st.markdown("---")
        st.markdown("**Com Elasticidade da Demanda:**")
        
        # Previne divis√£o por zero se taxa_juros_full_anual for 0
        if taxa_juros_full_anual <= 0:
            st.warning("N√£o √© poss√≠vel calcular varia√ß√£o percentual na taxa de juros quando a taxa full √© 0%.")
            qtd_projetos_demandados_elasticidade = 0
            aumento_demanda_percentual_display = "N/A"
        else:
            variacao_juros_percentual = (taxa_juros_subsidio_anual - taxa_juros_full_anual) / taxa_juros_full_anual
            
            demanda_base_full = qtd_projetos_credito_full # N√∫mero de projetos que o FNDIT financiaria a juros full
            
            aumento_demanda_percentual = elasticidade_demanda * variacao_juros_percentual
            qtd_projetos_demandados_elasticidade = demanda_base_full * (1 + aumento_demanda_percentual)
            aumento_demanda_percentual_display = f"{aumento_demanda_percentual:.2%}"
            
        st.metric("Projetos Demandados (Elasticidade)", f"{int(qtd_projetos_demandados_elasticidade)}")
        st.markdown(f"*(Assumindo {int(demanda_base_full)} projetos como demanda base a juros full)*")
        st.markdown(f"*(Aumento de demanda de: {aumento_demanda_percentual_display})*")

        st.markdown(f"**Conclus√£o Elasticidade:** O FNDIT pode subsidiar at√© {qtd_projetos_capacidade_fndit_display} projetos, mas a demanda estimada √© de {int(qtd_projetos_demandados_elasticidade)} projetos. Isso sugere que a demanda de mercado √© o fator limitante neste cen√°rio.")


    # --- Cen√°rio 3: Subven√ß√£o Total do Projeto ---
    with col3:
        st.subheader("Cen√°rio 3: Subven√ß√£o Total")
        qtd_projetos_subvencao = montante_fndit // valor_projeto if valor_projeto > 0 else 0
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", f"{int(qtd_projetos_subvencao)}")
        st.markdown(f"**Detalhes por Projeto (Subven√ß√£o Total):**")
        st.markdown(f"- Valor da Subven√ß√£o: R$ {valor_projeto:,.2f}")
        st.markdown(f"*(N√£o h√° parcelas ou juros, pois o valor √© doado)*")
        st.markdown(f"- VPL para o Tomador (Subven√ß√£o): R$ {valor_projeto:,.2f}") # VPL √© o valor recebido


    st.markdown("---")

    st.header("An√°lise Comparativa e Indicadores de Impacto")

    col_ind1, col_ind2, col_ind3 = st.columns(3)

    # Custo de Subs√≠dio por Projeto
    with col_ind1:
        st.subheader("Custo de Subs√≠dio por Projeto (FNDIT)")
        if subs_por_projeto > 1e-9: # Only show if there's a meaningful positive subsidy
            st.metric("Subs√≠dio de Juros", f"R$ {subs_por_projeto:,.2f}")
            st.markdown("*(Este √© o valor que o FNDIT gasta por projeto para reduzir os juros para o tomador)*")
        else:
            st.info("N√£o h√° subs√≠dio de juros ou √© insignificante (taxa subsidiada igual ou maior que a full).")

    # Custo por Tonelada de CO2e Evitada (Estimado)
    with col_ind2:
        st.subheader("Custo por Tonelada de CO2e Evitada")
        if reducao_co2e_por_projeto_ton > 0:
            if subs_por_projeto > 1e-9:
                custo_ton_co2e_subsidio = subs_por_projeto / reducao_co2e_por_projeto_ton
                st.metric("Custo Subs√≠dio/ton CO2e (Juros Subsid.)", f"R$ {custo_ton_co2e_subsidio:,.2f}")
            else:
                st.info("Custo Subs√≠dio/ton CO2e n√£o aplic√°vel (sem subs√≠dio ou subs√≠dio zero).")
            
            custo_ton_co2e_subvencao = valor_projeto / reducao_co2e_por_projeto_ton
            st.metric("Custo Subven√ß√£o/ton CO2e (Subven√ß√£o Total)", f"R$ {custo_ton_co2e_subvencao:,.2f}")
        else:
            st.warning("Redu√ß√£o de CO2e por projeto deve ser maior que zero para calcular o custo por tonelada.")


    # Alavancagem de Capital Privado (para o cen√°rio de subs√≠dio de juros)
    with col_ind3:
        st.subheader("Alavancagem de Capital Privado")
        if subs_por_projeto > 1e-9:
            alavancagem_subs = valor_projeto / subs_por_projeto
            st.metric("Alavancagem (Subs√≠dio de Juros)", f"{alavancagem_subs:,.2f}x")
            st.markdown(f"*(Cada R$1 do FNDIT em subs√≠dio atrai R${alavancagem_subs:,.2f} de capital privado para o projeto)*")
        else:
            st.info("N√£o aplic√°vel ou calcul√°vel para Alavancagem com Subs√≠dio de Juros (subs√≠dio zero ou negativo).")
        
        st.metric("Alavancagem (Subven√ß√£o Total)", "N√£o aplic√°vel (1:1)")
        st.markdown("*(Subven√ß√£o total n√£o alavanca capital privado, pois o FNDIT cobre 100% do projeto)*")


    st.markdown("---")

    # --- Gr√°fico de Compara√ß√£o de Projetos ---
    st.header("Comparativo de Quantidade de Projetos")

    data = {
        'Cen√°rio': ['1. Cr√©dito Full', '2. Subs√≠dio Juros (Capac. FNDIT)', '2. Subs√≠dio Juros (Demanda)', '3. Subven√ß√£o Total'],
        'Projetos Financi√°veis': [
            qtd_projetos_credito_full,
            qtd_projetos_capacidade_fndit, # Use the raw float('inf') here for plotting
            qtd_projetos_demandados_elasticidade,
            qtd_projetos_subvencao
        ]
    }
    df_projetos = pd.DataFrame(data)

    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(df_projetos['Cen√°rio'], df_projetos['Projetos Financi√°veis'], color=['skyblue', 'lightgreen', 'salmon', 'gold'])
    ax.set_ylabel("Quantidade de Projetos")
    ax.set_title("Projetos Financiados por Cen√°rio")
    plt.xticks(rotation=15, ha='right')

    # Adicionar o n√∫mero em cima de cada barra
    for bar in bars:
        yval = bar.get_height()
        if yval == float('inf'):
            ax.text(bar.get_x() + bar.get_width()/2, 0, "Inf.", ha='center', va='bottom', fontsize=10, color='red')
        else:
            ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{int(yval)}', ha='center', va='bottom', fontsize=10)

    plt.tight_layout()
    st.pyplot(fig)

    st.markdown("---")
    st.subheader("Considera√ß√µes Adicionais para a Pol√≠tica P√∫blica:")
    st.markdown("""
    * **Qual o objetivo principal?** Maximizar o n√∫mero de projetos? Maximizar a redu√ß√£o de CO2e? Alavancar mais capital privado? Estimular inova√ß√£o? A resposta a isso define a "melhor" estrat√©gia.
    * **An√°lise de Sensibilidade:** Explore diferentes valores para a Elasticidade da Demanda. Como os resultados mudam se a demanda for mais ou menos sens√≠vel aos juros?
    * **Barreiras n√£o-financeiras:** Al√©m dos juros, quais outras barreiras (conhecimento t√©cnico, burocracia, acesso √† tecnologia) podem estar limitando a demanda por projetos de descarboniza√ß√£o? O FNDIT pode atuar nesses pontos.
    * **Monitoramento e Avalia√ß√£o:** Implementar um sistema robusto para monitorar o impacto real dos projetos financiados em termos de descarboniza√ß√£o, gera√ß√£o de valor e retorno financeiro.
    * **Estruturas H√≠bridas:** Considere misturar as estrat√©gias. Por exemplo, uma pequena subven√ß√£o inicial (seed money) combinada com cr√©dito subsidiado para o restante do projeto.
    """)
else:
    st.info("Ajuste os par√¢metros na barra lateral e clique em 'Simular' para ver os resultados.")
