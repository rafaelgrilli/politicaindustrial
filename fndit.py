import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
import plotly.express as px
import plotly.graph_objects as go

# --- Fun√ß√µes de C√°lculo ---

@st.cache_data
def calcular_parcela_price_cached(valor_financiamento, taxa_juros_mensal, num_parcelas):
    """Calcula a parcela fixa do sistema Price."""
    return calcular_parcela_price(valor_financiamento, taxa_juros_mensal, num_parcelas)

def calcular_parcela_price(valor_financiamento, taxa_juros_mensal, num_parcelas):
    """Calcula a parcela fixa do sistema Price."""
    if num_parcelas <= 0:
        return float('inf')
    if taxa_juros_mensal <= 1e-9:
        return valor_financiamento / num_parcelas
    
    try:
        denominador = 1 - (1 + taxa_juros_mensal)**(-num_parcelas)
        if abs(denominador) < 1e-9:
            return valor_financiamento / num_parcelas
        return (valor_financiamento * taxa_juros_mensal) / denominador
    except OverflowError:
        return float('inf')

@st.cache_data
def calcular_vpl_cached(fluxos_caixa, taxa_desconto_mensal):
    """Calcula o Valor Presente L√≠quido (VPL) de uma s√©rie de fluxos de caixa."""
    return calcular_vpl(fluxos_caixa, taxa_desconto_mensal)

def calcular_vpl(fluxos_caixa, taxa_desconto_mensal):
    """Calcula o Valor Presente L√≠quido (VPL) de uma s√©rie de fluxos de caixa."""
    if abs(taxa_desconto_mensal) < 1e-9:
        return sum(fluxos_caixa)
    
    vpl = 0
    for t, fluxo in enumerate(fluxos_caixa):
        if t > 0 and abs(taxa_desconto_mensal) > 1e-9:
            discount_factor = math.exp(-t * math.log(1 + taxa_desconto_mensal))
        else:
            discount_factor = 1 / ((1 + taxa_desconto_mensal)**t)
        vpl += fluxo * discount_factor
    return vpl

@st.cache_data
def gerar_plano_amortizacao(valor_financiamento, taxa_juros_mensal, num_parcelas):
    """Gera um plano de amortiza√ß√£o no sistema Price."""
    if num_parcelas <= 0 or valor_financiamento <= 0:
        return pd.DataFrame()
    if taxa_juros_mensal <= 1e-9:
        parcela = valor_financiamento / num_parcelas
        dados = {
            'M√™s': range(1, num_parcelas + 1),
            'Juros': [0.0] * num_parcelas,
            'Amortiza√ß√£o': [parcela] * num_parcelas,
            'Saldo Devedor': [valor_financiamento - parcela * mes for mes in range(1, num_parcelas + 1)]
        }
        return pd.DataFrame(dados)

    parcela = calcular_parcela_price(valor_financiamento, taxa_juros_mensal, num_parcelas)
    saldo_devedor = valor_financiamento
    meses, juros, amortizacoes, saldos = [], [], [], []

    for mes in range(1, num_parcelas + 1):
        juros_mes = saldo_devedor * taxa_juros_mensal
        amortizacao_mes = parcela - juros_mes
        saldo_devedor -= amortizacao_mes
        
        meses.append(mes)
        juros.append(juros_mes)
        amortizacoes.append(amortizacao_mes)
        saldos.append(max(0, saldo_devedor)) # Garantir que o saldo n√£o seja negativo

    return pd.DataFrame({
        'M√™s': meses,
        'Juros': juros,
        'Amortiza√ß√£o': amortizacoes,
        'Saldo Devedor': saldos
    })

# --- Configura√ß√µes da P√°gina Streamlit ---
st.set_page_config(layout="wide", page_title="Simulador de Fomento √† Descarboniza√ß√£o (FNDIT)")

st.title("üå± Simulador de Pol√≠tica P√∫blica de Fomento √† Descarboniza√ß√£o")
st.markdown("""
Esta ferramenta permite simular o impacto de diferentes estrat√©gias de aloca√ß√£o de recursos do FNDIT
em projetos de descarboniza√ß√£o, considerando a elasticidade da demanda por cr√©dito.
""")

# --- Add informational expanders ---
with st.expander("‚ÑπÔ∏è Entenda a Elasticidade da Demanda"):
    st.markdown("""
    A elasticidade da demanda mede quanto a quantidade demandada de cr√©dito responde a mudan√ßas na taxa de juros.
    - **Valor de -1.5** significa que uma redu√ß√£o de 1% na taxa de juros aumenta a demanda em aproximadamente 1.5%.
    - **Valores mais negativos** indicam demanda mais sens√≠vel a mudan√ßas nas taxas de juros.
    """)

with st.expander("‚ÑπÔ∏è Como interpretar os resultados"):
    st.markdown("""
    **Como interpretar os resultados:**
    - **VPL para o Tomador**: Valores mais altos indicam melhor custo-benef√≠cio para quem recebe o financiamento.
    - **Alavancagem**: Mostra quanto capital privado √© mobilizado por cada real p√∫blico investido.
    - **Efici√™ncia de Aloca√ß√£o**: Percentual que mostra o aproveitamento dos recursos dispon√≠veis.
    - **Custo-Efetividade**: Compara o custo do projeto (ou do subs√≠dio) com o pre√ßo de mercado da tonelada de CO2e evitada.
    - **Efici√™ncia Econ√¥mica**: Mostra o percentual do custo de descarboniza√ß√£o que √© coberto pelo subs√≠dio do FNDIT.
    """)

# --- Par√¢metros de Entrada na barra lateral ---
st.sidebar.header("‚öôÔ∏è Par√¢metros da Simula√ß√£o")

# Se√ß√£o de Par√¢metros Financeiros
st.sidebar.subheader("üí∞ Par√¢metros Financeiros")
valor_projeto = st.sidebar.slider("1. Valor do Projeto de Descarboniza√ß√£o (R$)", 
                                  min_value=1_000_000, max_value=100_000_000,
                                  value=30_000_000, step=1_000_000, key="valor_projeto")
st.sidebar.info("Este √© o custo total de um projeto de descarboniza√ß√£o, como a instala√ß√£o de pain√©is solares ou uma frota de ve√≠culos el√©tricos.")

taxa_juros_full_anual = st.sidebar.slider("2. Taxa de Juros Full (a.a. %) - Mercado", 
                                          min_value=0.0, max_value=15.0, 
                                          value=7.8, step=0.1, key="taxa_juros_full_anual") / 100
st.sidebar.info("A taxa de juros que o tomador de cr√©dito pagaria em uma condi√ß√£o de mercado 'normal', sem subs√≠dios do FNDIT.")

montante_fndit = st.sidebar.slider("3. Montante no FNDIT para Subs√≠dios/Cr√©dito (R$)", 
                                   min_value=10_000_000, max_value=1_000_000_000, 
                                   value=200_000_000, step=10_000_000, key="montante_fndit")
st.sidebar.info("O total de recursos dispon√≠veis no FNDIT para apoiar os projetos. Este montante pode ser usado para cr√©dito ou subs√≠dio.")

prazo_anos = st.sidebar.slider("4. Prazo para Amortiza√ß√£o (anos)", 
                               min_value=1, max_value=20,
                               value=5, step=1, key="prazo_anos")
st.sidebar.info("O n√∫mero de anos para o tomador de cr√©dito pagar o financiamento.")

taxa_juros_subsidio_anual = st.sidebar.slider("5. Taxa de Juros Subsidiada Alvo (a.a. %)", 
                                               min_value=0.0, max_value=max(0.1, taxa_juros_full_anual * 100),
                                               value=min(3.0, taxa_juros_full_anual * 100), step=0.1, key="taxa_juros_subsidio_anual") / 100
st.sidebar.info("A taxa de juros reduzida que o FNDIT oferece aos projetos. A diferen√ßa entre esta taxa e a taxa 'full' de mercado √© o subs√≠dio.")

elasticidade_demanda = st.sidebar.slider("6. Elasticidade da Demanda por Cr√©dito de Descarboniza√ß√£o", 
                                         min_value=-5.0, max_value=-0.1,
                                         value=-1.5, step=0.1, key="elasticidade_demanda")
st.sidebar.info("Mede a sensibilidade da demanda por cr√©dito em rela√ß√£o √†s mudan√ßas na taxa de juros. Uma elasticidade de -1.5, por exemplo, indica que uma redu√ß√£o de 1% na taxa de juros aumenta a demanda em aproximadamente 1.5%.")

taxa_desconto_tomador_anual = st.sidebar.slider("7. Taxa de Desconto para VPL (Tomador) a.a. (%)",
                                                min_value=0.0, max_value=25.0,
                                                value=12.0, step=0.5, key="taxa_desconto_tomador_anual") / 100
st.sidebar.info("Representa a taxa de retorno m√≠nima aceit√°vel do tomador de cr√©dito. √â usada para calcular o valor presente de futuros fluxos de caixa (VPL).")

# Valida√ß√µes dos par√¢metros
if taxa_juros_subsidio_anual >= taxa_juros_full_anual:
    st.sidebar.warning("A taxa subsidiada deve ser menor que a taxa full para ter efeito.")
if valor_projeto <= 0:
    st.sidebar.error("O valor do projeto deve ser positivo.")
if montante_fndit < valor_projeto:
    st.sidebar.warning("O montante do FNDIT √© menor que o valor de um projeto.")

# Se√ß√£o de Par√¢metros de Descarboniza√ß√£o
st.sidebar.subheader("üå± Par√¢metros de Descarboniza√ß√£o")
abordagem_co2 = st.sidebar.radio(
    "1. Metodologia para Estimativa de CO2 Evitado",
    ["Nenhuma", "Tecnologia de Descarboniza√ß√£o Industrial", "Meta Customizada"],
    key="abordagem_co2_radio",
    help="Baseado em metodologias do MCTI, EPE e estudos setoriais brasileiros."
)

fator_co2 = 0
metodologia_info = ""
custo_real_tecnologia = None

if abordagem_co2 == "Tecnologia de Descarboniza√ß√£o Industrial":
    fatores_tecnologia = {
        "Efici√™ncia Energ√©tica Industrial": {"fator": 150, "custo_real": 120, "calculo": "Redu√ß√£o de consumo de energia em processos industriais (ex: motores, caldeiras)", "premissas": "Otimiza√ß√£o de equipamentos, sistemas de controle, e isolamento t√©rmico.", "fontes": "IEA, EPE, MME (2023)"},
        "Eletrifica√ß√£o de Processos": {"fator": 180, "custo_real": 200, "calculo": "Substitui√ß√£o de combust√≠veis f√≥sseis (g√°s, carv√£o) por eletricidade renov√°vel", "premissas": "Considera a eletrifica√ß√£o de fornos, caldeiras e aquecimento industrial.", "fontes": "IEA, MCTI, estudos setoriais (2024)"},
        "Captura e Utiliza√ß√£o de Carbono (CCU)": {"fator": 110, "custo_real": 450, "calculo": "Captura de CO‚ÇÇ emitido em processos para uso como insumo", "premissas": "Tecnologia em est√°gio inicial no Brasil, com custos elevados.", "fontes": "IEMA, GCCSI, estudos de caso (2024)"},
        "Hidrog√™nio Verde (Uso Industrial)": {"fator": 140, "custo_real": 550, "calculo": "Substitui√ß√£o de hidrog√™nio cinza (g√°s natural) por H2 verde", "premissas": "Foco em setores como fertilizantes, refino e siderurgia.", "fontes": "IEA, EPE, relat√≥rios setoriais (2023)"},
        "Biocombust√≠veis (Uso Industrial)": {"fator": 160, "custo_real": 130, "calculo": "Substitui√ß√£o de combust√≠veis f√≥sseis por bioenergia", "premissas": "Biomassa e biog√°s para gera√ß√£o de calor e energia.", "fontes": "ABiog√°s, Embrapa, relat√≥rios industriais (2023)"}
    }
    tecnologia_name = st.sidebar.selectbox("2. Tecnologia de Descarboniza√ß√£o Industrial", list(fatores_tecnologia.keys()), key="tecnologia_selector")
    fator_co2 = fatores_tecnologia[tecnologia_name]["fator"]
    custo_real_tecnologia = fatores_tecnologia[tecnologia_name]["custo_real"]
    metodologia_info = f"**C√°lculo:** {fatores_tecnologia[tecnologia_name]['calculo']}\n**Premissas:** {fatores_tecnologia[tecnologia_name]['premissas']}\n**Fontes:** {fatores_tecnologia[tecnologia_name]['fontes']}"

elif abordagem_co2 == "Meta Customizada":
    fator_co2 = st.sidebar.slider(
        "2. Fator de Redu√ß√£o (tCO2e/milh√£o R$/ano)",
        min_value=10, max_value=500, value=100, step=10,
        key="fator_custom_slider",
        help="Range baseado em estudos setoriais brasileiros (2023-2024)."
    )
    metodologia_info = "**Aten√ß√£o:** Fator customizado - recomenda-se valida√ß√£o t√©cnica com especialista setorial."

# L√≥gica de controle do bot√£o "Simular"
if 'run_simulation' not in st.session_state:
    st.session_state.run_simulation = False

if st.sidebar.button("Simular"):
    st.session_state.run_simulation = True

# Bot√£o para gerar relat√≥rio em PDF (com instru√ß√µes)
st.sidebar.markdown("---")
if st.sidebar.button("üìÑ Gerar Relat√≥rio PDF"):
    st.warning("Para salvar a p√°gina como PDF, utilize a fun√ß√£o de impress√£o do seu navegador (Ctrl+P ou Cmd+P).")

# O resto do c√≥digo s√≥ ser√° executado ap√≥s o clique no bot√£o
if st.session_state.run_simulation:
    # --- C√°lculos Financeiros ---
    prazo_meses = prazo_anos * 12
    taxa_juros_full_anual_display = f"{taxa_juros_full_anual * 100:.2f}%"
    taxa_juros_subsidio_anual_display = f"{taxa_juros_subsidio_anual * 100:.2f}%"
    taxa_juros_full_mensal = (1 + taxa_juros_full_anual)**(1/12) - 1 if taxa_juros_full_anual > 0 else 0.0
    taxa_juros_subsidio_mensal = (1 + taxa_juros_subsidio_anual)**(1/12) - 1 if taxa_juros_subsidio_anual > 0 else 0.0
    taxa_desconto_tomador_mensal = (1 + taxa_desconto_tomador_anual)**(1/12) - 1 if taxa_desconto_tomador_anual > 0 else 0.0

    # C√°lculos dos Cen√°rios
    parcela_full = calcular_parcela_price_cached(valor_projeto, taxa_juros_full_mensal, prazo_meses)
    juros_total_full = parcela_full * prazo_meses - valor_projeto
    fluxos_tomador_full = [-parcela_full] * prazo_meses
    fluxos_tomador_full[0] += valor_projeto
    vpl_tomador_full = calcular_vpl_cached(fluxos_tomador_full, taxa_desconto_tomador_mensal)
    
    parcela_subsidio = calcular_parcela_price_cached(valor_projeto, taxa_juros_subsidio_mensal, prazo_meses)
    subs_por_projeto = (parcela_full - parcela_subsidio) * prazo_meses
    fluxos_tomador_subsidio = [-parcela_subsidio] * prazo_meses
    fluxos_tomador_subsidio[0] += valor_projeto
    vpl_tomador_subsidio = calcular_vpl_cached(fluxos_tomador_subsidio, taxa_desconto_tomador_mensal)
    
    qtd_projetos_credito_full = montante_fndit // valor_projeto if valor_projeto > 0 else 0
    if subs_por_projeto <= 1e-9 or subs_por_projeto == float('inf'):
        qtd_projetos_capacidade_fndit = float('inf')
    else:
        qtd_projetos_capacidade_fndit = montante_fndit // subs_por_projeto
    
    qtd_projetos_subvencao = montante_fndit // valor_projeto if valor_projeto > 0 else 0
    
    # C√°lculos de Impacto da Demanda
    if taxa_juros_full_anual <= 0:
        qtd_projetos_demandados_elasticidade = 0
    else:
        variacao_juros_percentual = (taxa_juros_subsidio_anual - taxa_juros_full_anual) / taxa_juros_full_anual
        demanda_base_full = qtd_projetos_credito_full
        aumento_demanda_percentual = elasticidade_demanda * variacao_juros_percentual
        qtd_projetos_demandados_elasticidade = demanda_base_full * (1 + aumento_demanda_percentual)
        
    if qtd_projetos_capacidade_fndit != float('inf'):
        projetos_efetivos = min(qtd_projetos_demandados_elasticidade, qtd_projetos_capacidade_fndit)
    else:
        projetos_efetivos = qtd_projetos_demandados_elasticidade

    # --- Dashboard Executivo ---
    st.header("Sum√°rio Executivo da Simula√ß√£o")
    col_vpl, col_alavancagem, col_custo, col_projetos = st.columns(4)

    with col_vpl:
        st.subheader("Benef√≠cio para o Tomador")
        st.metric("VPL do Projeto (com Subs√≠dio)", f"R$ {vpl_tomador_subsidio:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.info(f"O VPL do mesmo projeto sem subs√≠dio seria de R$ {vpl_tomador_full:,.2f}.".replace(",", "X").replace(".", ",").replace("X", "."))

    with col_alavancagem:
        st.subheader("Alavancagem de Capital")
        if subs_por_projeto > 1e-9:
            alavancagem_subs = valor_projeto / subs_por_projeto
            st.metric("Alavancagem", f"{alavancagem_subs:,.2f}x".replace(",", "X").replace(".", ",").replace("X", "."))
        else:
            st.metric("Alavancagem", "N√£o aplic√°vel")
        st.info("Mede o capital privado mobilizado por cada real p√∫blico do FNDIT.")
    
    with col_custo:
        st.subheader("Custo de Descarboniza√ß√£o")
        if subs_por_projeto > 0 and (valor_projeto / 1_000_000) * fator_co2 > 0:
            custo_por_tonelada = subs_por_projeto / (((valor_projeto / 1_000_000) * fator_co2) * prazo_anos)
            st.metric("Custo/tCO2e (FNDIT)", f"R$ {custo_por_tonelada:,.0f}")
        else:
            st.metric("Custo/tCO2e (FNDIT)", "N/A")
        st.info("Compara o custo do subs√≠dio do FNDIT com o carbono evitado.")

    with col_projetos:
        st.subheader("Alcance da Pol√≠tica")
        st.metric("Projetos Efetivamente Financiados", f"{int(projetos_efetivos):,}".replace(",", "."))
        st.info(f"Este n√∫mero √© o m√≠nimo entre a capacidade do FNDIT ({int(qtd_projetos_capacidade_fndit):,}) e a demanda do mercado ({int(qtd_projetos_demandados_elasticidade):,}).".replace(",", ".").replace("X", "."))

    st.markdown("---")

    # --- An√°lise Comparativa e Indicadores de Impacto ---
    st.header("An√°lise Detalhada por Cen√°rio")
    col1, col2, col3 = st.columns(3)

    # Cen√°rio 1: Cr√©dito com Juros Full
    with col1:
        st.subheader("Cen√°rio 1: Cr√©dito com Juros Full")
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", f"{int(qtd_projetos_credito_full):,}".replace(",", "."))
        st.info(f"Taxa de Juros: {taxa_juros_full_anual_display}")
        st.markdown(f"**Detalhes por Projeto:**")
        st.markdown(f"- Parcela Mensal: R$ {parcela_full:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"- Juros Totais Pagos: R$ {juros_total_full:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"- VPL para o Tomador: R$ {vpl_tomador_full:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    # Cen√°rio 2: Subs√≠dio de Juros
    with col2:
        st.subheader("Cen√°rio 2: Subs√≠dio de Juros")
        qtd_projetos_capacidade_fndit_display = f"{int(qtd_projetos_capacidade_fndit):,}".replace(",", ".") if qtd_projetos_capacidade_fndit != float('inf') else "Infinito"
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", qtd_projetos_capacidade_fndit_display)
        st.info(f"Taxa de Juros: {taxa_juros_subsidio_anual_display}")
        st.markdown(f"**Detalhes por Projeto:**")
        st.markdown(f"- Parcela Mensal: R$ {parcela_subsidio:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"- Juros Totais Pagos: R$ {parcela_subsidio * prazo_meses - valor_projeto:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"- **Subs√≠dio FNDIT por Projeto: R$ {subs_por_projeto:,.2f}**".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"- VPL para o Tomador: R$ {vpl_tomador_subsidio:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    # Cen√°rio 3: Subven√ß√£o Total do Projeto
    with col3:
        st.subheader("Cen√°rio 3: Subven√ß√£o Total")
        st.metric("Projetos Financi√°veis (Capacidade FNDIT)", f"{int(qtd_projetos_subvencao):,}".replace(",", "."))
        st.info("Neste modelo, o FNDIT cobre 100% do custo do projeto.")
        st.markdown(f"**Detalhes por Projeto:**")
        st.markdown(f"- Valor da Subven√ß√£o: R$ {valor_projeto:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        st.markdown(f"*(N√£o h√° parcelas ou juros, pois o valor √© doado)*")
        st.markdown(f"- VPL para o Tomador: R$ {valor_projeto:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    st.markdown("---")

    # --- Gr√°fico de Amortiza√ß√£o ---
    st.header("Evolu√ß√£o da Amortiza√ß√£o e Juros")
    st.info("Visualize como a parcela do financiamento √© dividida entre juros e amortiza√ß√£o ao longo do tempo. O subs√≠dio do FNDIT (Cen√°rio 2) transfere o peso da parcela dos juros para a amortiza√ß√£o, acelerando o pagamento do principal.")
    
    df_full = gerar_plano_amortizacao(valor_projeto, taxa_juros_full_mensal, prazo_meses)
    df_subsidio = gerar_plano_amortizacao(valor_projeto, taxa_juros_subsidio_mensal, prazo_meses)
    
    fig = go.Figure()
    
    # Trace para Juros (Cen√°rio 1)
    fig.add_trace(go.Scatter(x=df_full['M√™s'], y=df_full['Juros'], mode='lines', 
                             name='Juros (Cen√°rio 1)', line=dict(color='red')))
    # Trace para Juros (Cen√°rio 2)
    fig.add_trace(go.Scatter(x=df_subsidio['M√™s'], y=df_subsidio['Juros'], mode='lines',
                             name='Juros (Cen√°rio 2)', line=dict(color='green')))
    # Trace para Saldo Devedor (Cen√°rio 1)
    fig.add_trace(go.Scatter(x=df_full['M√™s'], y=df_full['Saldo Devedor'], mode='lines',
                             name='Saldo Devedor (Cen√°rio 1)', line=dict(color='red', dash='dash')))
    # Trace para Saldo Devedor (Cen√°rio 2)
    fig.add_trace(go.Scatter(x=df_subsidio['M√™s'], y=df_subsidio['Saldo Devedor'], mode='lines',
                             name='Saldo Devedor (Cen√°rio 2)', line=dict(color='green', dash='dash')))

    fig.update_layout(title="Comparativo de Amortiza√ß√£o",
                      xaxis_title="M√™s",
                      yaxis_title="Valor (R$)",
                      legend_title="Legenda")
    
    st.plotly_chart(fig, use_container_width=True)

    # --- Se√ß√£o de Descarboniza√ß√£o ---
    st.markdown("---")
    
    if abordagem_co2 != "Nenhuma" and fator_co2 > 0:
        co2_evitado_anual = (valor_projeto / 1_000_000) * fator_co2
        reducao_total_periodo = co2_evitado_anual * prazo_anos

        st.header("üî• Impacto de Descarboniza√ß√£o Estimado")
        st.markdown("---")
        
        col1_co2, col2_co2, col3_co2, col4_co2 = st.columns(4)
        with col1_co2:
            st.metric("Redu√ß√£o Anual de CO2e", f"{co2_evitado_anual:,.0f} t/ano")
        with col2_co2:
            st.metric("Redu√ß√£o Total no Per√≠odo", f"{reducao_total_periodo:,.0f} t")
        with col3_co2:
            if subs_por_projeto > 0 and reducao_total_periodo > 0:
                custo_por_tonelada_projeto = subs_por_projeto / reducao_total_periodo
                tipo_custo = "Subs√≠dio"
            else:
                custo_por_tonelada_projeto = valor_projeto / reducao_total_periodo if reducao_total_periodo > 0 else 0
                tipo_custo = "Investimento"
            st.metric(f"Custo {tipo_custo}/Tonelada", f"R$ {custo_por_tonelada_projeto:,.0f}")
        with col4_co2:
            carros_equivalentes = co2_evitado_anual / 4
            st.metric("Equiv. Carros Retirados", f"{carros_equivalentes:,.0f}")
        
        st.subheader("üí∞ An√°lise de Custo-Efetividade")
        st.info("Este gr√°fico compara o custo de descarboniza√ß√£o do seu projeto (custo do subs√≠dio dividido pelo carbono evitado) com as refer√™ncias de mercado de carbono. Ele ajuda a avaliar se o investimento do FNDIT √© competitivo.")
        referencias_mercado = {"Mercado Volunt√°rio (M√≠n.)": 50, "Mercado Volunt√°rio (M√°x.)": 180, "Regulado (M√≠n.)": 80, "Regulado (M√°x.)": 250, "CBIOs (RenovaBio)": 85}
        df_comparacao_lista = [{"Categoria": k, "Custo (R$/tCO2e)": v, "Tipo": "Mercado"} for k, v in referencias_mercado.items()]
        
        if abordagem_co2 == "Tecnologia de Descarboniza√ß√£o Industrial" and 'tecnologia_name' in locals():
            df_comparacao_lista.append({"Categoria": "Custo Real da Tecnologia", "Custo (R$/tCO2e)": custo_real_tecnologia, "Tipo": "Tecnologia"})
        
        df_comparacao_lista.append({"Categoria": "Custo do Seu Projeto (FNDIT)", "Custo (R$/tCO2e)": custo_por_tonelada_projeto, "Tipo": "Projeto"})
        
        df_comparacao = pd.DataFrame(df_comparacao_lista)
        
        fig = px.bar(df_comparacao, x="Categoria", y="Custo (R$/tCO2e)", color="Tipo", title="Compara√ß√£o com Refer√™ncias de Mercado e Custo Real de Tecnologias",
                     color_discrete_map={"Mercado": "lightblue", "Tecnologia": "orange", "Projeto": "darkgreen"})
        st.plotly_chart(fig, use_container_width=True)

        if custo_por_tonelada_projeto <= 150:
            st.success(f"‚úÖ **Custo-efetivo**: Abaixo ou igual ao mercado volunt√°rio (R$ {custo_por_tonelada_projeto:,.0f}/tCO2e).")
        elif custo_por_tonelada_projeto <= 200:
            st.info(f"‚ÑπÔ∏è **Competitivo**: Dentro do range regulado (R$ {custo_por_tonelada_projeto:,.0f}/tCO2e).")
        elif custo_por_tonelada_projeto <= 350:
            st.warning(f"‚ö†Ô∏è **Acima do mercado**: Justifique os co-benef√≠cios (R$ {custo_por_tonelada_projeto:,.0f}/tCO2e).")
        else:
            st.error(f"‚ùå **Muito alto**: Revise a parametriza√ß√£o (R$ {custo_por_tonelada_projeto:,.0f}/tCO2e).")
        
        st.subheader("üî¨ Efici√™ncia Econ√¥mica do Subs√≠dio")
        st.info("Este indicador mostra o percentual do custo real de descarboniza√ß√£o que √© coberto pelo subs√≠dio do FNDIT. Quanto mais pr√≥ximo de 100%, mais o FNDIT est√° fechando a lacuna financeira do projeto.")
        if subs_por_projeto > 0 and custo_real_tecnologia is not None:
            eficiencia_economica = custo_por_tonelada_projeto / custo_real_tecnologia
            st.metric("Efici√™ncia Econ√¥mica", f"{eficiencia_economica:.2%}")
        else:
            st.info("N√£o aplic√°vel para este cen√°rio de financiamento ou tecnologia.")

        st.subheader("üéØ Impacto Agregado da Pol√≠tica")
        st.info("Esta se√ß√£o mostra o impacto total da pol√≠tica de fomento √† descarboniza√ß√£o, considerando a capacidade financeira do FNDIT e a demanda estimada de projetos. Ela traduz os resultados financeiros e de carbono em m√©tricas mais amplas e de f√°cil compreens√£o.")
        if qtd_projetos_capacidade_fndit != float('inf'):
            reducao_total_politica = co2_evitado_anual * projetos_efetivos
            col_impacto1, col_impacto2, col_impacto3 = st.columns(3)
            with col_impacto1:
                st.metric("Redu√ß√£o Anual da Pol√≠tica", f"{reducao_total_politica:,.0f} t/ano")
            with col_impacto2:
                st.metric("Redu√ß√£o Total da Pol√≠tica", f"{reducao_total_politica * prazo_anos:,.0f} t")
            with col_impacto3:
                st.metric("Carros Retirados da Pol√≠tica", f"{reducao_total_politica / 4:,.0f}")
            st.markdown("---")
            st.warning(f"""
            **‚ö†Ô∏è Nota importante sobre a Demanda:**
            O FNDIT tem capacidade para financiar **{int(qtd_projetos_capacidade_fndit):,}** projetos, mas a elasticidade da demanda sugere que apenas **{int(qtd_projetos_demandados_elasticidade):,}** projetos seriam efetivamente demandados com a taxa de juros atual.
            Isso significa que, sem outras a√ß√µes de fomento e articula√ß√£o com o setor privado, pode haver uma baixa ades√£o. Para maximizar o impacto, o FNDIT precisa trabalhar a demanda de forma focada, identificando e apoiando empresas com maior potencial de descarboniza√ß√£o.
            """)
        else:
            st.info("O impacto agregado n√£o pode ser calculado, pois a capacidade de financiamento do FNDIT √© ilimitada para o subs√≠dio atual.")
    else:
        st.warning("Ajuste os par√¢metros de descarboniza√ß√£o para visualizar os resultados.")
else:
    st.info("Ajuste os par√¢metros na barra lateral e clique em 'Simular' para ver os resultados financeiros e de descarboniza√ß√£o.")
